<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Tactile L.Hand" id="4" localization="8" tooltip="Detect touch on left hand tactile sensor." x="343" y="168">
                            <bitmap>media/images/box/movement/move_leftarm.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="HLLeftTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftLeftTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="HLBackTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftBackTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Input name="HLRightTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftRightTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                            <Output name="leftTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The left of the left hand was touched." id="8" />
                            <Output name="backTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The back of the left hand was touched." id="9" />
                            <Output name="rightTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The right of the left hand was touched." id="10" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="if &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="171" y="142">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="if &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="171" y="39">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="if &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="171" y="246">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="9" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="8" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Say Text" id="3" localization="8" tooltip="Say the text set in parameters." x="493" y="30">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        </Box>
                        <Box name="WikiQuery" id="2" localization="8" tooltip="Enter tooltip here" x="161" y="157">
                            <bitmap>media/images/box/internet/internet.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="Query" type="0" type_size="1" nature="4" stm_value_name="WikiQuery" inner="1" tooltip="" id="4" />
                            <Input name="QueryString" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Wikipedia Connect" id="1" localization="8" tooltip="Receive a text in input, search the corresponding entry on Wikipedia and output the first paragraph of the entry." x="362" y="72">
                                                <bitmap>../../../../../../../../Users/choksolis/Documents/nao/commit/my-projects/naopedia/naopedia.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# -*- coding: utf-8 -*-

import re
import urllib
import urllib2
import xml.dom.minidom

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.myLogger = ALProxy("ALLogger")
        self.tts = ALProxy("ALTextToSpeech")
        self.lang_ref = { 'Chinese' : 'zh',
                               'English' : 'en',
                               'French' : 'fr',
                               'German' : 'de',
                               'Italian' : 'it',
                               'Japanese' : 'ja',
                               'Korean' : 'ko',
                               'Portuguese' : 'pt',
                               'Spanish' : 'es'
                              }
        self.error_msg = { "Chinese" : "我发现了什么。",
                                 "English" : "I found nothing.",
                                 "French" : "Je n'ai rien trouvé.",
                                 "German" : "Ich fand nichts.",
                                 "Italian" : "Ho trovato nulla.",
                                 "Japanese" : "何を発見した。",
                                 "Korean" : "아무것도 없습니다.",
                                 "Portuguese" : "Eu não achei nada.",
                                 "Spanish" : "No he encontrado nada."
                                }

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def wikipedia_request(self, title, lang):
        title = title.replace(" ", "_")
        url = "http://" + lang + ".wikipedia.org/w/api.php?action=query&titles=" + title + "&prop=revisions&rvprop=content&rvsection=0&redirects=1&format=xml"
        try:
            req = urllib2.Request(url)
            response = urllib2.urlopen(req)
            content = xml.dom.minidom.parseString(response.read())
            data = str(content.getElementsByTagName('rev')[0].firstChild.data.encode('utf-8'))
        except Exception, detail:
            self.myLogger.info("Wikipedia Connect", str(detail))
            data = "no"
        return data

    def cleanup_html(self, data):
        data = re.sub(r'<[^<].*?/?>', '', data)
        data = data.replace("&nbsp;", " ")
        return data

    def cleanup_wiki(self, data):
        data = re.sub(r'(?i)\{\{Date[^\[\]]*?\|([^}]*)\}\}', lambda m: m.group(1), data)    # remove wiki 'Date' markers
        data = re.sub(r'(?i)\{\{IPA(\-[^\|\{\}]+)*?\|([^\|\{\}]+)(\|[^\{\}]+)*?\}\}', lambda m: m.group(2), data)
        data = re.sub(r'(?i)\{\{Lang(\-[^\|\{\}]+)*?\|([^\|\{\}]+)(\|[^\{\}]+)*?\}\}', lambda m: m.group(2), data)
        data = re.sub(r'\{\{[^\{\}]+\}\}', '', data)
        data = re.sub(r'(?m)\{\{[^\{\}]+\}\}', '', data)
        data = re.sub(r'(?m)\{\|[^\{\}]*?\|\}', '', data)
        data = re.sub(r'(?i)\[\[Category:[^\[\]]*?\]\]', '', data)
        data = re.sub(r'(?i)\[\[Image:[^\[\]]*?\]\]', '', data)
        data = re.sub(r'(?i)\[\[File:[^\[\]]*?\]\]', '', data)
        data = re.sub(r'(?i)\[\[Fichier:[^\[\]]*?\]\]', '', data)
        data = re.sub(r'(?u)\[\[[^\[\]]*?:[^\[\]]*?\]\]', '', data)
        data = re.sub(r'\[\[[^\[\]]*?\|([^\[\]]*?)\]\]', lambda m: m.group(1), data)
        data = re.sub(r'\[\[([^\[\]]+?)\]\]', lambda m: m.group(1), data)
        data = re.sub(r'\[\[([^\[\]]+?)\]\]', '', data)
        data = re.sub(r'(?i)File:[^\[\]]*?', '', data)
        data = re.sub(r'\[[^\[\]]*? ([^\[\]]*?)\]', lambda m: m.group(1), data)
        data = re.sub(r"''+", '', data)
        data = re.sub(r'(?m)^\*$', '', data)
        data = re.sub(r'(?i)\{\{InfoBox[^\[\]]*?\}\}', '', data)    # remove 'infobox' text block
        data = re.sub(r'(?i)<ref[^\[\]]*?</ref>', '', data)    # remove 'ref' text blocks
        return data

    def cleanup_text(self, data):
        #remove unnecessary parts
        data = re.sub(r'\([^\[\]]*?\)', '', data)  # remove parentheses text blocks
        data = re.sub(r'(?u)【[^[\]]*?】', '', data)  # remove parentheses text blocks (japanese)
        data = re.sub(r'(?u)（[^[\]]*?）', '', data)  # remove parentheses text blocks (japanese)
        #replace chars
        data = data.replace("|", " ")
        data = data.replace(";", ".")
        data = data.replace(" - ", ", ")
        #remove chars
        data = data.replace('"', '')  # remove quotes
        data = data.replace('«', '')    # remove quotes
        data = data.replace('»', '')    # remove quotes
        data = data.replace("#", "") # remove hashes
        data = data.replace("/", "")   # remove slashes
        data = data.replace("*", "") # remove stars
        #remove extra spaces
        data = re.sub(r'\s+', ' ', data)  # remove extra spaces
        #clean-up punctuation - part1
        data = data.replace(" ,", ",")  # punctuation correction
        data = data.replace(" .", ".")  # punctuation correction
        data = data.replace(" !", "!")  # punctuation correction
        data = data.replace(" ?", "?")  # punctuation correction
        data = data.replace(" :", ":")  # punctuation correction
        #clean-up punctuation - part2
        data = data.replace(",.", ".")  # punctuation correction
        data = data.replace("...", ".")  # punctuation correction
        data = data.replace("..", ".")  # punctuation correction
        data = data.replace("!.", "!")  # punctuation correction
        data = data.replace("?.", "?")  # punctuation correction
        data = data.replace(":.", ":")  # punctuation correction
        return data

    def safe_chars(self, data, speech_lang):
        # modify or remove other TTS non-supported chars
        data = data.replace("Œ", "Oe")
        data = data.replace("œ", "oe")
        data = data.replace("’", "'")    # non-readable single-quote

        # common filter for non latin languages
        if speech_lang in [ 'Chinese', 'English', 'Korean', 'Japanese' ]:
            data = data.replace("Á", "A")
            data = data.replace("À", "A")
            data = data.replace("Â", "A")
            data = data.replace("Ä", "A")
            data = data.replace("Ã", "A")
            data = data.replace("á", "a")
            data = data.replace("à", "a")
            data = data.replace("â", "a")
            data = data.replace("ä", "a")
            data = data.replace("ã", "a")
            data = data.replace("É", "E")
            data = data.replace("È", "E")
            data = data.replace("Ê", "E")
            data = data.replace("Ë", "E")
            data = data.replace("é", "e")
            data = data.replace("è", "e")
            data = data.replace("ê", "e")
            data = data.replace("ë", "e")
            data = data.replace("Í", "I")
            data = data.replace("Ì", "I")
            data = data.replace("Î", "I")
            data = data.replace("Ï", "I")
            data = data.replace("í", "i")
            data = data.replace("ì", "i")
            data = data.replace("î", "i")
            data = data.replace("ï", "i")
            data = data.replace("Ó", "O")
            data = data.replace("Ò", "O")
            data = data.replace("Ô", "O")
            data = data.replace("Õ", "O")
            data = data.replace("Ö", "O")
            data = data.replace("ó", "o")
            data = data.replace("ò", "o")
            data = data.replace("ô", "o")
            data = data.replace("ö", "o")
            data = data.replace("õ", "o")
            data = data.replace("Ú", "U")
            data = data.replace("Ù", "U")
            data = data.replace("Û", "U")
            data = data.replace("Ü", "U")
            data = data.replace("ú", "u")
            data = data.replace("ù", "u")
            data = data.replace("û", "u")
            data = data.replace("ü", "u")
            data = data.replace("Ÿ", "Y")
            data = data.replace("ÿ", "y")
            data = data.replace("Æ", "Ae")
            data = data.replace("æ", "ae")
            data = data.replace("Œ", "Oe")
            data = data.replace("œ", "oe")
            data = data.replace("Ç", "S")
            data = data.replace("ç", "s")
            data = data.replace("Ñ", "N")
            data = data.replace("ñ", "n")
            data = data.replace("ß", "b")
            data = data.replace("¿", "")

        # language specific filters
        if ( speech_lang == 'English' ):
            # remove everything except standard ascii
            data = unicode(data.decode('utf-8'))
            data = re.sub(ur'[\u007b-\uffff]', '', data)
            data = data.encode('utf-8')
        elif speech_lang in [ 'French', 'German', 'Italian', 'Portuguese', 'Spanish' ]:
            # remove everything except ascii and latin chars
            data = unicode(data.decode('utf-8'))
            data = re.sub(ur'[\u007b-\u00bf]', '', data)
            data = re.sub(ur'[\u0100-\uffff]', '', data)
            data = data.encode('utf-8')
        elif ( speech_lang == 'Chinese' ):
            # remove everything except ascii and chinese chars
            data = unicode(data.decode('utf-8'))
            data = re.sub(ur'[\u007b-\u2e7f]', '', data)
            data = re.sub(ur'[\u3040-\u30ff]', '', data)        # japanese hiragana/katakana
            data = re.sub(ur'[\u3130-\u318f]', '', data)       # korean hangul
            data = re.sub(ur'[\ua000-\uf8ff]', '', data)
            data = re.sub(ur'[\ufb00-\uffff]', '', data)
            data = data.encode('utf-8')
        elif ( speech_lang == 'Japanese' ):
            # remove everything except ascii and japanese chars
            data = unicode(data.decode('utf-8'))
            data = re.sub(ur'[\u007b-\u2ffff]', '', data)
            data = re.sub(ur'[\u3100-\u33ff]', '', data) # korean hangul
            data = re.sub(ur'[\u4dc0-\u4dff]', '', data)
            data = re.sub(ur'[\u9fb0-\ufeff]', '', data)
            data = re.sub(ur'[\ufff0-\uffff]', '', data)
            data = data.encode('utf-8')
        elif ( speech_lang == 'Korean' ):
            # remove everything except ascii and hangul chars
            data = unicode(data.decode('utf-8'))
            data = re.sub(ur'[\u007b-\u30ff]', '', data)
            data = re.sub(ur'[\u3200-\uabff]', '', data)
            data = re.sub(ur'[\ud7a4-\uffff]', '', data)
            data = data.encode('utf-8')

        # english-specific filter
        if (speech_lang == "English"):
            data = data.replace("&", " and ")
        # french-specific filter
        elif (speech_lang == "French"):
            data = data.replace("&", " et ")
            data = data.replace("ß", "b")
        # german-specific filter
        elif (speech_lang == "German"):
            data = data.replace("&", " und ")
        # italian-specific filter
        elif (speech_lang == "Italian"):
            data = data.replace("&", " e ")
            data = data.replace("ß", "b")
        # korean specific filter
            data = data.replace("'", "")
            data = data.replace("…", " ")
        # portuguese-specific filter
        elif (speech_lang == "Portuguese"):
            data = data.replace("&", " e ")
            data = data.replace("ß", "b")
        # spanish-specific filter
        elif (speech_lang == "Spanish"):
            data = data.replace("&", " y ")
            data = data.replace("ß", "b")

        return data

    def onInput_onStart(self, p):
        thema = str(p)
        result = self.wikipedia_request(thema, self.lang_ref[self.tts.getLanguage()])
        if (result == "no" ):
            thema = thema.title()
            result = self.wikipedia_request(thema, self.lang_ref[self.tts.getLanguage()])
            if (result == "no" ):
                result = self.error_msg[self.tts.getLanguage()]

        result = self.cleanup_wiki(result)
        result = self.cleanup_html(result)
        result = self.safe_chars(result, self.tts.getLanguage())
        result = self.cleanup_text(result)

        self.myLogger.info("Wikipedia Connect", result)
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload()
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Get Memory Value" id="5" localization="8" tooltip="Enter tooltip here" x="165" y="134">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.storage = ALProxy('ALMemory')

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p=self.storage.getData(str( self.getParameter("Location")))
        self.onStopped(p) #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Location" inherits_from_parent="0" content_type="3" value="WikiQuery" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="3" indexofinput="3" outputowner="4" indexofoutput="9" />
                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="6" />
                        <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="6" />
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
